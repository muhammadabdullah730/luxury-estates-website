/**
 * Real Estate Website - Property Detail Page
 * Property gallery, map, and detail functionality
 * Generated by AI on 2023-11-15
 */

document.addEventListener('DOMContentLoaded', function() {
  // Only run on property detail page
  if (!document.querySelector('.property-content')) return;
  
  // Get property ID from URL
  const urlParams = new URLSearchParams(window.location.search);
  const propertyId = urlParams.get('id');
  
  if (!propertyId) {
    window.location.href = 'listings.html';
    return;
  }
  
  // Find property in data
  const property = PROPERTIES.find(p => p.id === propertyId);
  
  if (!property) {
    window.location.href = 'listings.html';
    return;
  }
  
  // Render property details
  renderPropertyDetails(property);
  
  // Initialize image gallery
  initImageGallery(property.images);
  
  // Initialize sticky sidebar
  initStickySidebar();
  
  // Initialize schedule visit modal
  initScheduleVisitModal();
  
  // Initialize map (stub - replace with real API key)
  initMap(property.location.lat, property.location.lng);
});

/**
 * Render property details on page
 */
function renderPropertyDetails(property) {
  // Set page title
  document.title = `${property.title} | Luxury Estates`;
  
  // Property header
  const header = document.querySelector('.property-header');
  if (header) {
    header.innerHTML = `
      <div class="container">
        <div class="breadcrumb">
          <li class="breadcrumb-item">
            <a href="index.html" class="breadcrumb-link">Home</a>
          </li>
          <li class="breadcrumb-item">
            <a href="listings.html" class="breadcrumb-link">Properties</a>
          </li>
          <li class="breadcrumb-item">
            <span class="breadcrumb-link active">${property.title}</span>
          </li>
        </div>
        <h1 class="property-title">${property.title}</h1>
        <div class="property-location">
          <i class="fas fa-map-marker-alt"></i>
          ${property.location.address}, ${property.location.area}, ${property.location.city}
        </div>
        <div class="property-price">${formatPrice(property.price, property.currency)}</div>
        <div class="property-meta">
          <div class="property-meta-item">
            <i class="fas fa-bed property-meta-icon"></i>
            <span>${property.bedrooms} Bedrooms</span>
          </div>
          <div class="property-meta-item">
            <i class="fas fa-bath property-meta-icon"></i>
            <span>${property.bathrooms} Bathrooms</span>
          </div>
          <div class="property-meta-item">
            <i class="fas fa-ruler-combined property-meta-icon"></i>
            <span>${property.area_sqft.toLocaleString()} sqft</span>
          </div>
          <div class="property-meta-item">
            <i class="fas fa-calendar-alt property-meta-icon"></i>
            <span>Built in ${property.year_built}</span>
          </div>
        </div>
      </div>
    `;
  }
  
  // Property description
  const description = document.querySelector('.property-description');
  if (description) {
    description.innerHTML = `
      <h2 class="property-section-title">Description</h2>
      ${property.description.split('\n').map(p => `<p>${p}</p>`).join('')}
    `;
  }
  
  // Property amenities
  const amenities = document.querySelector('.property-amenities');
  if (amenities) {
    amenities.innerHTML = `
      <h2 class="property-section-title">Amenities</h2>
      <div class="amenities-grid">
        ${property.features.map(feature => `
          <div class="property-amenity">
            <i class="fas fa-check property-amenity-icon"></i>
            <span>${feature}</span>
          </div>
        `).join('')}
      </div>
    `;
  }
  
  // Property agent
  const agent = document.querySelector('.property-agent');
  if (agent && property.agent) {
    agent.innerHTML = `
      <div class="property-agent-img-container">
        <img src="${property.agent.image}" alt="${property.agent.name}" class="property-agent-img">
      </div>
      <h3 class="property-agent-name">${property.agent.name}</h3>
      <p class="property-agent-title">${property.agent.position}</p>
      <p class="property-agent-bio">${property.agent.bio}</p>
      <div class="property-agent-contact">
        <a href="tel:${property.agent.phone}" class="btn btn-block btn-outline">
          <i class="fas fa-phone"></i> ${property.agent.phone}
        </a>
        <a href="mailto:${property.agent.email}" class="btn btn-block btn-primary">
          <i class="fas fa-envelope"></i> Contact Agent
        </a>
      </div>
    `;
  }
  
  // Property contact form
  const contactForm = document.querySelector('#property-contact-form');
  if (contactForm) {
    contactForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      // Simulate form submission
      const formData = new FormData(this);
      const data = Object.fromEntries(formData);
      
      // Show success message
      showAlert('Thank you for your inquiry. An agent will contact you shortly.', 'success');
      this.reset();
    });
  }
}

/**
 * Initialize image gallery with lightbox
 */
function initImageGallery(images) {
  const galleryMain = document.querySelector('.gallery-main');
  const galleryThumbs = document.querySelector('.gallery-thumbs');
  
  if (!galleryMain || !galleryThumbs) return;
  
  // Set main image
  galleryMain.innerHTML = `
    <img src="${images[0]}" alt="Property image 1" class="gallery-main-img">
  `;
  
  // Create thumbnails
  galleryThumbs.innerHTML = images.map((img, index) => `
    <div class="gallery-thumb ${index === 0 ? 'active' : ''}" data-index="${index}">
      <img src="${img}" alt="Property thumbnail ${index + 1}" class="gallery-thumb-img">
    </div>
  `).join('');
  
  // Thumbnail click handler
  galleryThumbs.querySelectorAll('.gallery-thumb').forEach(thumb => {
    thumb.addEventListener('click', function() {
      const index = this.getAttribute('data-index');
      
      // Update main image
      galleryMain.innerHTML = `
        <img src="${images[index]}" alt="Property image ${parseInt(index) + 1}" class="gallery-main-img">
      `;
      
      // Update active thumbnail
      galleryThumbs.querySelectorAll('.gallery-thumb').forEach(t => t.classList.remove('active'));
      this.classList.add('active');
    });
  });
  
  // Lightbox functionality
  galleryMain.addEventListener('click', function() {
    const currentIndex = parseInt(galleryThumbs.querySelector('.gallery-thumb.active').getAttribute('data-index'));
    openLightbox(images, currentIndex);
  });
}

/**
 * Open lightbox with gallery images
 */
function openLightbox(images, startIndex = 0) {
  const lightbox = document.createElement('div');
  lightbox.className = 'lightbox active';
  lightbox.innerHTML = `
    <div class="lightbox-content">
      <img src="${images[startIndex]}" alt="Property image ${startIndex + 1}" class="lightbox-img">
      <button class="lightbox-close">
        <i class="fas fa-times"></i>
      </button>
      <div class="lightbox-nav">
        <button class="lightbox-btn lightbox-prev">
          <i class="fas fa-chevron-left"></i>
        </button>
        <button class="lightbox-btn lightbox-next">
          <i class="fas fa-chevron-right"></i>
        </button>
      </div>
    </div>
  `;
  
  document.body.appendChild(lightbox);
  document.body.style.overflow = 'hidden';
  
  // Close lightbox
  const closeBtn = lightbox.querySelector('.lightbox-close');
  closeBtn.addEventListener('click', () => {
    lightbox.classList.remove('active');
    setTimeout(() => {
      lightbox.remove();
      document.body.style.overflow = '';
    }, 300);
  });
  
  // Navigation
  let currentIndex = startIndex;
  
  function updateLightboxImage(index) {
    if (index < 0) index = images.length - 1;
    if (index >= images.length) index = 0;
    
    currentIndex = index;
    lightbox.querySelector('.lightbox-img').src = images[currentIndex];
  }
  
  const prevBtn = lightbox.querySelector('.lightbox-prev');
  prevBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    updateLightboxImage(currentIndex - 1);
  });
  
  const nextBtn = lightbox.querySelector('.lightbox-next');
  nextBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    updateLightboxImage(currentIndex + 1);
  });
  
  // Keyboard navigation
  document.addEventListener('keydown', function lightboxKeyHandler(e) {
    if (e.key === 'Escape') {
      closeBtn.click();
    } else if (e.key === 'ArrowLeft') {
      prevBtn.click();
    } else if (e.key === 'ArrowRight') {
      nextBtn.click();
    }
  });
  
  // Click outside to close
  lightbox.addEventListener('click', (e) => {
    if (e.target === lightbox) {
      closeBtn.click();
    }
  });
}

/**
 * Initialize sticky sidebar
 */
function initStickySidebar() {
  const sidebar = document.querySelector('.sticky-sidebar');
  if (!sidebar) return;
  
  const headerHeight = document.querySelector('.header').offsetHeight;
  const footer = document.querySelector('.footer');
  
  function updateSidebarPosition() {
    const sidebarRect = sidebar.getBoundingClientRect();
    const footerRect = footer.getBoundingClientRect();
    
    const scrollPosition = window.scrollY;
    const sidebarTop = sidebarRect.top + scrollPosition;
    const sidebarBottom = sidebarTop + sidebarRect.height;
    const footerTop = footerRect.top + scrollPosition;
    
    if (window.innerWidth >= 992) {
      if (scrollPosition + headerHeight > sidebarTop) {
        sidebar.style.position = 'fixed';
        sidebar.style.top = `${headerHeight}px`;
        sidebar.style.width = `${sidebarRect.width}px`;
        
        if (sidebarBottom >= footerTop) {
          sidebar.style.position = 'absolute';
          sidebar.style.top = `${footerTop - sidebarRect.height}px`;
        }
      } else {
        sidebar.style.position = 'static';
      }
    } else {
      sidebar.style.position = 'static';
    }
  }
  
  window.addEventListener('scroll', debounce(updateSidebarPosition, 10));
  window.addEventListener('resize', debounce(updateSidebarPosition, 100));
  
  // Initial position
  updateSidebarPosition();
}

/**
 * Initialize schedule visit modal
 */
function initScheduleVisitModal() {
  const form = document.querySelector('#schedule-visit-form');
  if (!form) return;
  
  form.addEventListener('submit', function(e) {
    e.preventDefault();
    
    // Form validation
    const name = form.querySelector('#visit-name').value.trim();
    const email = form.querySelector('#visit-email').value.trim();
    const phone = form.querySelector('#visit-phone').value.trim();
    const date = form.querySelector('#visit-date').value;
    const time = form.querySelector('#visit-time').value;
    
    if (!name || !email || !phone || !date || !time) {
      showAlert('Please fill in all required fields.', 'error');
      return;
    }
    
    if (!/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/.test(email)) {
      showAlert('Please enter a valid email address.', 'error');
      return;
    }
    
    // Simulate form submission
    showAlert('Your visit has been scheduled. We will confirm the details shortly.', 'success');
    closeModal();
    form.reset();
  });
}

/**
 * Initialize map (stub - replace with real Google Maps API)
 */
function initMap(lat, lng) {
  const mapContainer = document.querySelector('.map-container');
  if (!mapContainer) return;
  
  // This is a placeholder - replace with actual Google Maps API code
  mapContainer.innerHTML = `
    <div class="map-placeholder">
      <i class="fas fa-map-marked-alt"></i>
      <p>Map would display here with API key</p>
      <small>Lat: ${lat}, Lng: ${lng}</small>
    </div>
  `;
  
  // To implement real Google Maps:
  // 1. Include Google Maps API script in your HTML
  // 2. Replace this function with:
  /*
  function initMap(lat, lng) {
    const mapContainer = document.querySelector('.map-container');
    if (!mapContainer) return;
    
    const location = { lat: parseFloat(lat), lng: parseFloat(lng) };
    const map = new google.maps.Map(mapContainer, {
      zoom: 15,
      center: location,
      styles: [
        // Add your custom map styles here
      ]
    });
    
    new google.maps.Marker({
      position: location,
      map: map,
      title: 'Property Location'
    });
  }
  */
}

/**
 * Show alert message
 */
function showAlert(message, type = 'success') {
  const alert = document.createElement('div');
  alert.className = `alert alert-${type}`;
  alert.innerHTML = `
    <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
    <div>${message}</div>
  `;
  
  // Add to page
  const container = document.querySelector('.container') || document.body;
  container.prepend(alert);
  
  // Remove after 5 seconds
  setTimeout(() => {
    alert.classList.add('fade-out');
    setTimeout(() => alert.remove(), 300);
  }, 5000);
}