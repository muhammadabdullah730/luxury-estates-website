/**
 * Real Estate Website - Search Functionality
 * Search and filter logic for property listings
 * Generated by AI on 2023-11-15
 */

document.addEventListener('DOMContentLoaded', function() {
  // Initialize search functionality if search elements exist
  if (document.querySelector('.search-form') || document.querySelector('#search-input')) {
    initSearch();
  }
});

/**
 * Initialize search functionality
 */
function initSearch() {
  // Main search form on home page
  const mainSearchForm = document.querySelector('.search-form');
  if (mainSearchForm) {
    mainSearchForm.addEventListener('submit', function(e) {
      e.preventDefault();
      const formData = new FormData(this);
      const params = new URLSearchParams();
      
      formData.forEach((value, key) => {
        if (value) params.append(key, value);
      });
      
      window.location.href = `listings.html?${params.toString()}`;
    });
  }
  
  // Header search input
  const headerSearchInput = document.querySelector('#search-input');
  if (headerSearchInput) {
    const searchSuggestions = document.querySelector('#search-suggestions');
    
    headerSearchInput.addEventListener('input', debounce(function() {
      const query = this.value.trim().toLowerCase();
      
      if (query.length < 2) {
        searchSuggestions.innerHTML = '';
        searchSuggestions.classList.remove('active');
        return;
      }
      
      // Get matching properties
      const matches = PROPERTIES.filter(property => {
        return (
          property.title.toLowerCase().includes(query) ||
          property.location.area.toLowerCase().includes(query) ||
          property.location.city.toLowerCase().includes(query)
        );
      }).slice(0, 5);
      
      // Display suggestions
      if (matches.length > 0) {
        searchSuggestions.innerHTML = matches.map(property => `
          <li>
            <a href="property.html?id=${property.id}">
              <div class="suggestion-img">
                <img src="${property.images[0]}" alt="${property.title}">
              </div>
              <div class="suggestion-info">
                <h4>${property.title}</h4>
                <p>${property.location.area}, ${property.location.city}</p>
                <p>${formatPrice(property.price, property.currency)}</p>
              </div>
            </a>
          </li>
        `).join('');
        
        searchSuggestions.classList.add('active');
      } else {
        searchSuggestions.innerHTML = '<li class="no-results">No properties found</li>';
        searchSuggestions.classList.add('active');
      }
    }, 300));
    
    // Close suggestions when clicking outside
    document.addEventListener('click', function(e) {
      if (!headerSearchInput.contains(e.target) && !searchSuggestions.contains(e.target)) {
        searchSuggestions.classList.remove('active');
      }
    });
  }
}

/**
 * Get URL parameters as an object
 */
function getUrlParams() {
  const params = new URLSearchParams(window.location.search);
  const result = {};
  
  for (const [key, value] of params) {
    result[key] = value;
  }
  
  return result;
}

/**
 * Filter properties based on criteria
 */
function filterProperties(filters) {
  return PROPERTIES.filter(property => {
    // Location filter
    if (filters.location && !property.location.area.toLowerCase().includes(filters.location.toLowerCase())) {
      return false;
    }
    
    // Type filter
    if (filters.type && property.type !== filters.type) {
      return false;
    }
    
    // Price range filter
    if (filters.minPrice && property.price < parseInt(filters.minPrice)) {
      return false;
    }
    
    if (filters.maxPrice && property.price > parseInt(filters.maxPrice)) {
      return false;
    }
    
    // Bedrooms filter
    if (filters.bedrooms && property.bedrooms < parseInt(filters.bedrooms)) {
      return false;
    }
    
    // Features filter
    if (filters.features) {
      const requiredFeatures = Array.isArray(filters.features) ? 
        filters.features : [filters.features];
      
      if (!requiredFeatures.every(feat => property.features.includes(feat))) {
        return false;
      }
    }
    
    return true;
  });
}

/**
 * Sort properties based on criteria
 */
function sortProperties(properties, sortBy) {
  switch (sortBy) {
    case 'price-asc':
      return [...properties].sort((a, b) => a.price - b.price);
    case 'price-desc':
      return [...properties].sort((a, b) => b.price - a.price);
    case 'newest':
      return [...properties].sort((a, b) => b.year_built - a.year_built);
    case 'area':
      return [...properties].sort((a, b) => b.area_sqft - a.area_sqft);
    default:
      return properties;
  }
}